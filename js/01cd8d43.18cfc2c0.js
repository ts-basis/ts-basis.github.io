"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2956],{4106:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=n(4848),r=n(8453);const a={title:"Data Routing",sidebar_position:4},i="Data Routing with Upstream getRouter",o={id:"data-ops/data-routing",title:"Data Routing",description:"You can route a particular data model to a specific upstream datastore by providing",source:"@site/docs/03_data-ops/data-routing.mdx",sourceDirName:"03_data-ops",slug:"/data-ops/data-routing",permalink:"/docs/data-ops/data-routing",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Data Routing",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Defining Upstream",permalink:"/docs/data-ops/upstream"},next:{title:"HTTP Shim",permalink:"/docs/category/http-shim"}},d={},c=[];function p(t){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsxs)(e.h1,{id:"data-routing-with-upstream-getrouter",children:["Data Routing with Upstream ",(0,s.jsx)(e.code,{children:"getRouter"})]})}),"\n",(0,s.jsxs)(e.p,{children:["You can route a particular data model to a specific upstream datastore by providing\n",(0,s.jsx)(e.code,{children:"getRouter"})," to the upstream config of the type class."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { Upstream } from 'ts-basis'\n\n@dataclass({ classVersion: semver('1.0.0') })\nclass UserInPostgres {\n    static index: typeof UserUpstream.index\n    static upstream = {\n        getRouter() {\n            // this will only push to redis\n            return {\n                universe: 'production',\n                target: 'postgres',\n            }\n        }\n    } \n    id: string = '';\n    name: string = '';\n    constructor(init?: Partial<UserInRedis>) {\n        Object.assign(this, init);\n    }\n}\n\n@dataclass({ classVersion: semver('1.0.0') })\nclass UserInRedis {\n    static index: typeof UserUpstream.index\n    static upstream = {\n        getRouter() {\n            // this will only push to redis\n            return {\n                universe: 'production',\n                target: 'redis',\n            }\n        }\n    } \n    id: string = '';\n    name: string = '';\n    constructor(init?: Partial<UserInRedis>) {\n        Object.assign(this, init);\n    }\n}\n\n// Adding different datastores\nUpstream.add(new UpstreamDatastorePostgres(localPostgresDsConfig), 'postgres')\nUpstream.add(new UpstreamDatastoreRedis(localPostgresDsConfig), 'redis')\n\nawait push(new UserInPostgres({})) // row added to postgres\nawait push(new UserInRedis({})) // row added to redis\n"})})]})}function u(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(p,{...t})}):p(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>o});var s=n(6540);const r={},a=s.createContext(r);function i(t){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:i(t.components),s.createElement(a.Provider,{value:e},t.children)}}}]);