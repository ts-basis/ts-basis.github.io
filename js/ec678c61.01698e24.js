"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5390],{7674:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=r(4848),t=r(8453);const o={title:"Custom Middlewares",sidebar_position:5},d="Extending with Middlewares",i={id:"http-shim/middleware",title:"Custom Middlewares",description:"Whereas HttpServerShim provides many default request pre and post handlers,",source:"@site/docs/04_http-shim/middleware.mdx",sourceDirName:"04_http-shim",slug:"/http-shim/middleware",permalink:"/docs/http-shim/middleware",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Custom Middlewares",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Predefined Roles",permalink:"/docs/http-shim/predefined-roles"},next:{title:"Shared Object",permalink:"/docs/http-shim/shared-env"}},a={},c=[{value:"Custom <code>pre</code> and <code>post</code> Handlers",id:"custom-pre-and-post-handlers",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"extending-with-middlewares",children:"Extending with Middlewares"})}),"\n",(0,s.jsxs)(n.p,{children:["Whereas ",(0,s.jsx)(n.code,{children:"HttpServerShim"})," provides many default request ",(0,s.jsx)(n.code,{children:"pre"})," and ",(0,s.jsx)(n.code,{children:"post"})," handlers,\nyou may want to add your own custom middleware to control body-parsing or\nheader-parsing behavior in a globel level. Such server-wide middleware support is\nprovided by ",(0,s.jsx)(n.code,{children:"HttpServerShim.addMiddleware(handler)"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export class MyAppServer extends HttpServerShim {\n    ...\n}\n\nserver.addMiddleware(async (op) => {\n    op.oriReq // you can access original request object from Express of Fastify\n    op.oriRes // you can access original response object from Express of Fastify\n\n    // no need for `next()` as `op` object will be passed to APIs\n})\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"custom-pre-and-post-handlers",children:["Custom ",(0,s.jsx)(n.code,{children:"pre"})," and ",(0,s.jsx)(n.code,{children:"post"})," Handlers"]}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"HttpServerShim"})," terms, ",(0,s.jsx)(n.code,{children:"pre"})," handler runs during request reception, and\n",(0,s.jsx)(n.code,{children:"post"})," handler runs after op object returns. You can individually override\nthe pre and post behavior of a standalone ",(0,s.jsx)(n.code,{children:"httpOp"})," by providing ",(0,s.jsx)(n.code,{children:"callbacks"}),"\nconfig at the op definition"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { HttpServerShim, httpOp, httpParam, httpReturn, required } from 'ts-basis/nodejs'\n\nexport class MyAppServer extends HttpServerShim {\n    ...\n    async initialize() {\n        ...\n        // Preprocessors (e.g. JSON body-parsing)\n        this.addDefaultProcessor(\n            ReqProcessor.AUTH, // checks token in Authorization header if custom handler is not defined\n            ReqProcessor.BASIC, // auto-parses body to JSON; much like json-parse middleware\n        )\n    }\n}\n\nserver.addMiddleware(async (op) => {\n    ...\n})\n\n// Define standalone server operation with well-known input/output\nexport const myApiFunction = httpOp(\n    {\n        params: {},\n        callbacks: {\n            onBeforePre: (op) => {\n                // runs before pre-processing\n            },\n            onAfterPre: (op) => {\n                // runs after pre-processing\n            },\n            onBeforePost: (op) => {\n                // runs before post-processing\n            },\n            onAfterPost: (op) => {\n                // runs after post-processing\n            },\n        },\n        returns: httpReturn<{ data: string }>(),\n    },\n    async (op) => {\n        return op.returnJson({ data: 'Hello World!' })\n\n        // ==== Order of Processing ====\n        //\n        // custom middlewares (addMiddleware)\n        // onBeforePre\n        // ReqProcessor.AUTH\n        // ReqProcessor.BASIC (json parser)\n        // onAfterPre\n        // this function: async (op) => {\n        //     return op.returnJson({ data: 'Hello World!' })    \n        // }\n        // onBeforePost\n        // Post-processing\n        // onAfterPost\n        //\n    },\n)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>i});var s=r(6540);const t={},o=s.createContext(t);function d(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);