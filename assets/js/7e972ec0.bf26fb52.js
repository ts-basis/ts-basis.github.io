"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6945],{4081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(4848),s=n(8453);const o={title:"Upstream CRUD",sidebar_position:7},a="Using CRUD Interface",i={id:"http-shim/upstream-crud",title:"Upstream CRUD",description:"Often times, there is a well-defined data model declared in the server logic",source:"@site/docs/04_http-shim/upstream-crud.mdx",sourceDirName:"04_http-shim",slug:"/http-shim/upstream-crud",permalink:"/docs/http-shim/upstream-crud",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Upstream CRUD",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Shared Object",permalink:"/docs/http-shim/shared-env"},next:{title:"TypeTools",permalink:"/docs/category/typetools"}},d={},c=[];function p(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"using-crud-interface",children:"Using CRUD Interface"})}),"\n",(0,r.jsx)(t.p,{children:"Often times, there is a well-defined data model declared in the server logic\nthat may allow users to do a simple CRUD operations without mounting all HTTP\nmethods and paths (e.g. GET, POST, PATCH, DELETE, etc.)."}),"\n",(0,r.jsxs)(t.p,{children:["To integrate ",(0,r.jsx)(t.code,{children:"HttpServerShim"})," with upstream data model, you can simply decorate\nwith the convenience decorator ",(0,r.jsx)(t.code,{children:"HTTP.CRUD"})," to handle all http methods with a\nsingle standalone handler."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { httpOp, httpParamCrud, httpReturnCrud, Upstream } from 'ts-basis/nodejs'\n\nexport class MyAppServer extends HttpServerShim {\n    ...\n\n    @HTTP.CRUD(`/my-object-path/:objectId`)\n    myCrudFunction = myCrudFunction\n\n    ...\n}\n\n// One function to handle all CRUD op\nexport const myCrudFunction = httpOp(\n    {\n        params: httpParamCrud(MyModelClass),\n        returns: httpReturnCrud<{ data: string }>(),\n    },\n    async (op, env) => {\n        return await Upstream.httpCrud(\n            op.method,\n            MyModelClass,\n            'objectId', // CRUD primary key (e.g. unique id,)\n            { ...op.params },\n        )\n    },\n)\n"})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var r=n(6540);const s={},o=r.createContext(s);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);