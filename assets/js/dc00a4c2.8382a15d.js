"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8256],{2772:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(4848),s=n(8453);const o={title:"Shared Object",sidebar_position:6},a="Shared env Object",i={id:"http-shim/shared-env",title:"Shared Object",description:"If you want to provide and shared global object in form of a known interface,",source:"@site/docs/04_http-shim/shared-env.mdx",sourceDirName:"04_http-shim",slug:"/http-shim/shared-env",permalink:"/docs/http-shim/shared-env",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Shared Object",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Custom Middlewares",permalink:"/docs/http-shim/middleware"},next:{title:"Upstream CRUD",permalink:"/docs/http-shim/upstream-crud"}},d={},c=[];function h(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsxs)(t.h1,{id:"shared-env-object",children:["Shared ",(0,r.jsx)(t.code,{children:"env"})," Object"]})}),"\n",(0,r.jsxs)(t.p,{children:["If you want to provide and shared global object in form of a known interface,\nyou can provide ",(0,r.jsx)(t.code,{children:"env"})," to the op definition. ",(0,r.jsx)(t.code,{children:"env"})," object will default extend\nthe ",(0,r.jsx)(t.code,{children:"HttpServerShim"})," and extend the given interface on top."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { httpOp, httpReturn, as } from 'ts-basis/nodejs'\n\ninterface MyInterface {\n    someSharedKeyValueMap: {\n        [key: string]: any\n    }\n}\n\nexport const myApiFunction = httpOp(\n    {\n        env: as<MyInterface>(),\n        params: {},\n        returns: httpReturn<{ data: string }>(),\n    },\n    async (op, env) => {\n        // env is (HttpServerShim & MyInterface) type\n        // shared key-value map can have data shared amongst the APIs\n        env.someSharedKeyValueMap['key'] = 'test'\n\n        return op.returnJson({ data: 'Hello World!' })\n    },\n)\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var r=n(6540);const s={},o=r.createContext(s);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);