"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7173],{3188:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var i=s(4848),l=s(8453);const r={title:"Type Helpers",sidebar_position:1},t=void 0,c={id:"typetools/utils/type-helper",title:"Type Helpers",description:"Table of Contents",source:"@site/docs/05_typetools/utils/type-helper.mdx",sourceDirName:"05_typetools/utils",slug:"/typetools/utils/type-helper",permalink:"/docs/typetools/utils/type-helper",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Type Helpers",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Utilities",permalink:"/docs/category/utilities"},next:{title:"Class Lineage",permalink:"/docs/typetools/utils/class-lineage"}},a={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Type Aliases",id:"type-aliases",level:2},{value:"Partial Types",id:"partial-types",level:3},{value:"Full Types",id:"full-types",level:3},{value:"Intersection and Exclusion",id:"intersection-and-exclusion",level:3},{value:"Class and Template Types",id:"class-and-template-types",level:3},{value:"Array and Function Types",id:"array-and-function-types",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"autoImplement",id:"autoimplement",level:3},{value:"punchGrab",id:"punchgrab",level:3},{value:"as",id:"as",level:3},{value:"Miscellaneous Types",id:"miscellaneous-types",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#type-aliases",children:"Type Aliases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#partial-types",children:"Partial Types"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#full-types",children:"Full Types"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#intersection-and-exclusion",children:"Intersection and Exclusion"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#class-and-template-types",children:"Class and Template Types"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#array-and-function-types",children:"Array and Function Types"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#utility-functions",children:"Utility Functions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#autoimplement",children:"autoImplement"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#punchgrab",children:"punchGrab"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#as",children:"as"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#miscellaneous-types",children:"Miscellaneous Types"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Type Transform"})," module is a collection of types and functions designed to enhance the capabilities of TypeScript by offering flexible type manipulation tools. These tools are especially useful in large TypeScript projects where complex type operations might be required."]}),"\n",(0,i.jsx)(n.p,{children:"This module includes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Type aliases for partial and full types"}),"\n",(0,i.jsx)(n.li,{children:"Utilities for working with classes and function arguments"}),"\n",(0,i.jsx)(n.li,{children:"Promise handling utilities"}),"\n",(0,i.jsx)(n.li,{children:"Type assertion functions"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"type-aliases",children:"Type Aliases"}),"\n",(0,i.jsx)(n.h3,{id:"partial-types",children:"Partial Types"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"PartialAny<T>"})}),": Creates a type with all properties of ",(0,i.jsx)(n.code,{children:"T"})," set to ",(0,i.jsx)(n.code,{children:"optional"})," and of type ",(0,i.jsx)(n.code,{children:"any"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type PartialAny<T> = { [P in keyof T]?: any };\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"PartialCustom<T, S>"})}),": Creates a type with all properties of ",(0,i.jsx)(n.code,{children:"T"})," set to ",(0,i.jsx)(n.code,{children:"optional"})," with custom type ",(0,i.jsx)(n.code,{children:"S"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type PartialCustom<T, S = any> = { [P in keyof T]?: S };\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"PartialCustomWith<T, S, A>"})}),": Combines custom partial type ",(0,i.jsx)(n.code,{children:"S"})," with additional properties ",(0,i.jsx)(n.code,{children:"A"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type PartialCustomWith<T, S, A> = PartialCustom<T, S> & A;\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"full-types",children:"Full Types"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FullCustom<T, S>"})}),": Converts all properties of ",(0,i.jsx)(n.code,{children:"T"})," to be of type ",(0,i.jsx)(n.code,{children:"S"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type FullCustom<T, S = any> = { [P in keyof T]: S };\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FullRequire<T>"})}),": Converts all properties of ",(0,i.jsx)(n.code,{children:"T"})," to be ",(0,i.jsx)(n.code,{children:"required"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type FullRequire<T> = { [P in keyof T]: T[P] };\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"intersection-and-exclusion",children:"Intersection and Exclusion"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Intersect<A, B>"})}),": Creates a type with the intersecting properties of ",(0,i.jsx)(n.code,{children:"A"})," and ",(0,i.jsx)(n.code,{children:"B"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type Intersect<A, B> = { [P in keyof A & keyof B]: A[P] | B[P] };\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"NoExtra<T, U>"})}),": Ensures no extra properties in ",(0,i.jsx)(n.code,{children:"U"})," compared to ",(0,i.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type NoExtra<T, U extends T = T> = U & Impossible<Exclude<keyof U, keyof T>>;\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Impossible<K>"})}),": Creates a type that is impossible to instantiate."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type Impossible<K extends keyof any> = { [P in K]: never };\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"class-and-template-types",children:"Class and Template Types"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Class<T>"})}),": A type that represents a constructor of ",(0,i.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export interface Class<T> { new (...args): T; name: string; }\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ClassStaticTemplate<T, StaticTemplate>"})}),": Combines a class type ",(0,i.jsx)(n.code,{children:"T"})," with static template properties."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export type ClassStaticTemplate<T, StaticTemplate> = Class<T> & StaticTemplate;\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"array-and-function-types",children:"Array and Function Types"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Unshift<H, T>"})}),": Adds an element to the start of a tuple type ",(0,i.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export type Unshift<H, T extends readonly any[]> = ((arg: H, ...argN: T) => void) extends (...r: infer R) => void ? R : never;\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Push<T, V>"})}),": Adds an element to the end of a tuple type ",(0,i.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export type Push<T extends readonly any[], V> = Unshift<any, T> extends infer A ? { [K in keyof A]: K extends keyof T ? T[K] : V } : never;\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"AddFunctionArg<F, ExtraParam>"})}),": Adds an extra parameter to the function ",(0,i.jsx)(n.code,{children:"F"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export type AddFunctionArg<F extends (...args) => any, ExtraParam> = (...args: Extract<Push<Parameters<F>, ExtraParam>, readonly any[]>) => ReturnType<F>;\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,i.jsx)(n.h3,{id:"autoimplement",children:"autoImplement"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"autoImplement<T>()"})})}),"\n",(0,i.jsx)(n.p,{children:"A utility function to automatically implement a class with default values."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export function autoImplement<T>(): new () => T {\n  return class {} as any;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"punchgrab",children:"punchGrab"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"punchGrab<T>(res: T): PromiseCollapse<T>"})})}),"\n",(0,i.jsx)(n.p,{children:"A utility to flatten nested promises until the underlying value is obtained."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export function punchGrab<T = any>(res: T): PromiseCollapse<T> {\n  return promise(async (resolve, reject) => {\n    try {\n      while ((res as any)?.then) {\n        (res as any) = await res;\n      }\n      return resolve(res);\n    } catch (e) {\n      return reject(e);\n    }\n  }) as any;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"as",children:"as"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"as<T>(v?: any)"})})}),"\n",(0,i.jsx)(n.p,{children:"A type assertion utility function to cast a value to a specific type."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export function as<T>(v?: any) {\n  return v as T;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"miscellaneous-types",children:"Miscellaneous Types"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"PromiseCollapse<A0>"})}),": Flattens nested promises into a single resolved value type."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export type PromiseCollapse<A0> = A0 extends Promise<Promise<Promise<Promise<Promise<infer X>>>>> ? X : A0 extends Promise<Promise<Promise<Promise<infer X>>>> ? X : A0 extends Promise<Promise<Promise<infer X>>> ? X : A0 extends Promise<Promise<infer X>> ? X : A0 extends Promise<infer X> ? X : A0;\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"TaggedTemplateSelfChain<T, S>"})}),": Represents a self-chaining tagged template."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export type TaggedTemplateSelfChain<T, S extends any[] = any[]> = T & ((strArr: TemplateStringsArray, ...args: S) => TaggedTemplateSelfChain<T>);\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"configBoolean"})}),": Represents a configuration option that can be a boolean or numeric boolean."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export type configBoolean = true | false | 1 | 0;\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"required"})}),": A constant representing a required type."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export const required: RequiredType = true;\n"})}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(6540);const l={},r=i.createContext(l);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);