"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5445],{8491:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=n(4848),a=n(8453);const o={title:"Syncing Data",sidebar_position:2},r="Pull & Push",i={id:"data-ops/data-sync",title:"Syncing Data",description:"Instantiated data models with @dataclass decorator can be pushed to and pulled",source:"@site/docs/03_data-ops/data-sync.mdx",sourceDirName:"03_data-ops",slug:"/data-ops/data-sync",permalink:"/docs/data-ops/data-sync",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Syncing Data",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"@dataclass",permalink:"/docs/data-ops/dataclass"},next:{title:"Defining Upstream",permalink:"/docs/data-ops/upstream"}},d={},c=[{value:"Operations",id:"operations",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"pull--push",children:"Pull & Push"})}),"\n",(0,s.jsxs)(t.p,{children:["Instantiated data models with ",(0,s.jsx)(t.code,{children:"@dataclass"})," decorator can be pushed to and pulled\nfrom the remote datastores defined in the application."]}),"\n",(0,s.jsx)(t.h2,{id:"operations",children:"Operations"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Push"}),": Sending local data changes to the remote datastore."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Pull"}),": Retrieving the latest data from the remote datastore to update local objects."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"import { push, pull } from 'ts-basis'\n\n// Push to remote\nconst newUser = new User({ name: 'Alice', id: 'test' })\nawait push(newUser)\n\n// Pull updates\nawait pull(newUser)\n\n// Getting User through an index (returns null if not found)\nconst aliceUser = await User.index.byId.get({ id: 'test' })\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(6540);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);