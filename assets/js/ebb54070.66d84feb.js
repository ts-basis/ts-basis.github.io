"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3136],{8475:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>h});var r=t(4848),i=t(8453);const s={title:"HttpServerShim",sidebar_position:1},o="Using HttpServerShim",a={id:"http-shim/http-shim",title:"HttpServerShim",description:"HttpServerShim class provides a way to declarating and managing the application servers",source:"@site/docs/04_http-shim/http-shim.mdx",sourceDirName:"04_http-shim",slug:"/http-shim/http-shim",permalink:"/docs/http-shim/http-shim",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"HttpServerShim",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"HTTP Shim",permalink:"/docs/category/http-shim"},next:{title:"HTTP Decorators",permalink:"/docs/http-shim/decorator-list"}},c={},h=[{value:"Modular Server Functions",id:"modular-server-functions",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"using-httpservershim",children:["Using ",(0,r.jsx)(n.code,{children:"HttpServerShim"})]})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"HttpServerShim"})," class provides a way to declarating and managing the application servers\nwith relatively high number of API paths such that individual paths and HTTP operations\nare defined in modular fashion for easy long-term maintenance."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"HttpServerShim"})," can wrap either Express or Fastify to make HTTP operations be declared\nin standalone manner that is also invokable in non-HTTP setting."]}),"\n",(0,r.jsx)(n.p,{children:"The HTTP Shim is particularly focused on:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Path Registration with Decorators"}),": Simplifying the registration of HTTP methods through decorators."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Initial config/scret resolution"}),": Dynamic server config resolution and app context routing."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Validation"}),": ",(0,r.jsx)(n.code,{children:"HttpOp"})," definition with ",(0,r.jsx)(n.code,{children:"validate"})," options for input parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": Providing clear error management with ",(0,r.jsx)(n.code,{children:"ReturnCodeFamily"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Functions Mounted Paths"}),": Each server operation is defined elsewhere in the codebase with\n",(0,r.jsx)(n.code,{children:"HttpOp"})," (can be invoked without request), and are composed in the main server class"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security"}),": Ensuring secure communication channels."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { httpOp, HttpServerShim, ReqProcessor } from 'ts-basis/nodejs'\n\nexport class MyAppServer extends HttpServerShim {\n    constructor() {\n        super({\n            indexKey: `my-server`, // unique handle for server\n            type: HttpBaseLib.EXPRESS, // Express or Fastify\n            startOptions: { port: 8080 },\n        })\n        this.initialize()\n    }\n\n    @HTTP.GET(`/my-public-path`)\n    myApiFunction = myApiFunction\n\n    async initialize() {\n        this.apiVersion = 'v1'\n        this.addDefaultProcessor(\n            ReqProcessor.AUTH, // checks token in Authorization header if custom handler is not defined\n            ReqProcessor.BASIC, // auto-parses body to JSON; much like json-parse middleware\n        )\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"modular-server-functions",children:"Modular Server Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { httpOp, httpParam, httpReturn, required } from 'ts-basis/nodejs'\n\n// Define standalone server operation with well-known input/output\nexport const myApiFunction = httpOp(\n    {\n        params: {\n            myParam: httpParam<string>({\n                required,\n                validate: async (v) => {\n                    if (v.length <= 100) {\n                        return `Parameter 'myParam' cannot be less than 100 characters`\n                    }\n                    return true\n                }\n            }),\n        },\n        returns: httpReturn<{ data: string }>(),\n    },\n    async (op) => {\n        const { myParam } = op.params\n        return op.returnJson({ data: 'Hello World!' })\n    },\n)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);