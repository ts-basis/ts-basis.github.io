"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4978],{3837:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var t=a(4848),s=a(8453);const i={title:"Validatable",sidebar_position:3},l=void 0,o={id:"typetools/extensions/validatable",title:"Validatable",description:"The validatable.ts module is designed to extend objects with validation capabilities. It allows developers to define and enforce validation rules on object properties, ensuring data integrity and consistency.",source:"@site/docs/05_typetools/extensions/validatable.mdx",sourceDirName:"05_typetools/extensions",slug:"/typetools/extensions/validatable",permalink:"/docs/typetools/extensions/validatable",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Validatable",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Data Importable",permalink:"/docs/typetools/extensions/data-importable"},next:{title:"Derivable",permalink:"/docs/typetools/extensions/derivable"}},r={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"<code>Validatable</code> - Runtime Data Model Validation",id:"validatable---runtime-data-model-validation",level:2},{value:"Classes and Interfaces",id:"classes-and-interfaces",level:2},{value:"<code>ValidatableSettings</code>",id:"validatablesettings",level:3},{value:"<code>ValidatableOptions</code>",id:"validatableoptions",level:3},{value:"<code>ValidatableExtensionData</code>",id:"validatableextensiondata",level:3},{value:"<code>Validatable</code>",id:"validatable",level:3},{value:"Common Validations",id:"common-validations",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"More Usage Examples",id:"more-usage-examples",level:2},{value:"Advanced",id:"advanced",level:2},{value:"<code>Validatable</code> Performance Characteristics",id:"validatable-performance-characteristics",level:3},{value:"Performance Optimization",id:"performance-optimization",level:4}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"validatable.ts"})," module is designed to extend objects with validation capabilities. It allows developers to define and enforce validation rules on object properties, ensuring data integrity and consistency."]}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#validatable---runtime-data-model-validation",children:"Validation Overview"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#classes-and-interfaces",children:"Classes and Interfaces"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#validatablesettings",children:"ValidatableSettings"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#validatableoptions",children:"ValidatableOptions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#validatableextensiondata",children:"ValidatableExtensionData"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#validatable",children:"Validatable"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#common-validations",children:"Common Validations"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#implementation-details",children:"Implementation Details"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#more-usage-examples",children:"More Usage Examples"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#advanced",children:"Advanced"})}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"validatable---runtime-data-model-validation",children:[(0,t.jsx)(n.code,{children:"Validatable"})," - Runtime Data Model Validation"]}),"\n",(0,t.jsx)(n.p,{children:"While using interfaces as data model definitions type-guides programmers during development, it does not support robust runtime enforcement on instantiated models. Ideally, data validation should accompany the data definition itself; however, native data modeling with Typescript interfaces often forces programmers to scatter validation logic elsewhere in the codebase."}),"\n",(0,t.jsxs)(n.p,{children:["An ",(0,t.jsx)(n.code,{children:"initializable class"})," as the data model definition instead of using ",(0,t.jsx)(n.code,{children:"interface"})," can assist greatly in pinpointing the source of bad data on runtime as well as keeping validation definitions nicely in the class definition itself. (** The only cavest is the performance overhead, which is relatively negligible unless you are dealing with millions of objects. See ",(0,t.jsx)(n.em,{children:"Performance Characteristics"}),"  section for more details)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Validatable, defineOn } from 'ts-basis';\nclass MyModel {\n  strVal = 'test';\n  numVal = 5;\n  dateVal = null;\n  constructor(init?: Partial<MyModel>) {\n    defineOn( this, MyModel, lib => {\n      lib.validatable.enforce( this, { init }, {\n          strVal (value, e) { // throw on bad assignment\n            if ( typeof value !== 'string'  ||  ! value.startsWith('test') ) {\n              return e.throw(`${e.path} must be a truthy string starting with 'test'`); }},\n          numVal (value, e) { // don't throw; just ignore bad assignments\n            if ( typeof v !== 'number' ) {\n              return e.cancel(); }}, // equivalently: return false;\n          dateVal (value, e) { // hijack & transform assigment value\n            if ( value === 'transformMe' ) {\n              return e.transformValue(new Date()); }},\n        });\n    });\n  }\n}\n\n// Generic object testing against a given type (true/false)\nconst result = Validatable.test({ strVal: 'bad' }, MyModel); // false\n// Runtime Instantiation Guard\nconst inst1 = new MyModel(); // valid; default prop1='test' and prop2=5 are valid.\nconst inst2 = new MyModel({ strVal: 'test2' }) // valid; starts with 'test'\nconst inst3 = new MyModel({ strVal: 'yolo', numVal: 100 }); // throws; 'yolo' does not start with 'test'\n// Runtime Property Assignment Guard\ninst1.strVal = 'a'; // throws; and assignment cancels\ninst1.numVal = 'string'; // canceled (\"ignored\"); will remain value 5\ninst1.dateVal = 'transformMe';  // transformed; inst1.dateVal will be new Date() instance.\n// External Data Casting\nconst inst1_1 = Validatable.cast(MyModel, { numVal: 10, dateVal: null }); // valid; new MyModel instance { strVal: 'test', numVal: 10, dateVal: null }\nconst inst1_2 = Validatable.cast(MyModel, { strVal: 'bad' }); // throws\nconst inst1_3 = Validatable.cast(MyModel, { strVal: 'bad' }, false); // returns null; throwError=false\n"})}),"\n",(0,t.jsx)(n.h2,{id:"classes-and-interfaces",children:"Classes and Interfaces"}),"\n",(0,t.jsx)(n.h3,{id:"validatablesettings",children:(0,t.jsx)(n.code,{children:"ValidatableSettings"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ValidatableSettings"})," class extends ",(0,t.jsx)(n.code,{children:"PropertiesControllerSettings"})," and is responsible for initializing and storing settings related to validation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export class ValidatableSettings extends PropertiesControllerSettings {\n  static extensionValidatable = 'Validatable';\n  extensionValidatable = ValidatableSettings.extensionValidatable;\n\n  constructor(init?: Partial<ValidatableSettings>) {\n    super(init);\n    if (init) {\n      Object.assign(this, init);\n    }\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Properties:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"extensionValidatable"}),": A static and instance property used to identify the validatable extension."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"validatableoptions",children:(0,t.jsx)(n.code,{children:"ValidatableOptions"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ValidatableOptions"})," interface defines the options available for configuring validation behavior."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export interface ValidatableOptions {\n  init?: any;\n  throwOnValidationError?: boolean; // default true\n  trackErrors?: boolean;\n  prepend?: boolean;\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Properties:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"init"}),": Initial data for validation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"throwOnValidationError"}),": Determines whether to throw an error on validation failure."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"trackErrors"}),": Indicates if errors should be tracked."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prepend"}),": Option to prepend validation."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"validatableextensiondata",children:(0,t.jsx)(n.code,{children:"ValidatableExtensionData"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ValidatableExtensionData"})," class implements ",(0,t.jsx)(n.code,{children:"TypeToolsExtensionData"})," and stores metadata related to validation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export class ValidatableExtensionData implements TypeToolsExtensionData {\n  options?: ValidatableOptions;\n  errors?: PropertyAccessTrace[];\n  cancels?: PropertyAccessTrace[];\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Properties:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"}),": Stores validation options."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"errors"}),": Tracks validation errors."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cancels"}),": Tracks cancellations."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"validatable",children:(0,t.jsx)(n.code,{children:"Validatable"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Validatable"})," class is the core component providing methods to enforce, test, and manage validations on target objects."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export class Validatable implements TypeToolsExtension {\n  // Methods and static properties\n\n  static getExtensionData(target: any, settings = ValidatableSettings): ValidatableExtensionData {\n    // Implementation\n  }\n\n  static typeCheck(target: any, settings = ValidatableSettings): boolean {\n    // Implementation\n  }\n\n  // Other methods...\n\n  constructor(settings?: Partial<ValidatableSettings>) {\n    this.settings = settingsInitialize(ValidatableSettings, settings);\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Key Static Methods:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"getExtensionData"}),": Retrieves extension data for a target."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"typeCheck"}),": Checks if a target can be validated."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"implementOn"}),": Applies validation capabilities to a target."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"enforce"}),": Enforces validation rules on a target object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"test"}),": Tests data against a validation type."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-validations",children:"Common Validations"}),"\n",(0,t.jsxs)(n.p,{children:["The module defines a set of common validations through the ",(0,t.jsx)(n.code,{children:"CommonValidations"})," object, providing shorthand methods for various validation rules."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export const CommonValidations = {\n  notNull: 'notNull' as const,\n  boolean: 'boolean' as const,\n  number: 'number' as const,\n  string: 'string' as const,\n  object: 'object' as const,\n  array: 'array' as const,\n  // More validations...\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Examples:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"notNull"}),": Ensures the value is neither ",(0,t.jsx)(n.code,{children:"null"})," nor ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"boolean"}),": Checks if the value is a boolean."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"number"}),": Ensures the value is of type ",(0,t.jsx)(n.code,{children:"number"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsxs)(n.p,{children:["The module leverages several utility functions and methods from other modules like ",(0,t.jsx)(n.code,{children:"type-tools"}),", ",(0,t.jsx)(n.code,{children:"data-importable"}),", ",(0,t.jsx)(n.code,{children:"properties-controller"}),", etc. It integrates seamlessly with these components to provide a comprehensive validation system."]}),"\n",(0,t.jsx)(n.h2,{id:"more-usage-examples",children:"More Usage Examples"}),"\n",(0,t.jsxs)(n.p,{children:["Here are some examples to illustrate how to use the ",(0,t.jsx)(n.code,{children:"Validatable"})," class and its methods:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Define a class\nclass User {\n  name: string;\n  age: number;\n}\n\n// Enforce validation rules\nValidatable.enforce(User, {\n  init: { name: 'John', age: 30 },\n  throwOnValidationError: true,\n}, {\n  name: CommonValidations.string,\n  age: CommonValidations.number,\n});\n\n// Create a user instance and validate\nconst user = new User();\nuser.name = 'Alice';\nuser.age = 25;\n\nconst isValid = Validatable.test(user, User);\nconsole.log(`Is valid: ${isValid}`); // Output: Is valid: true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced",children:"Advanced"}),"\n",(0,t.jsxs)(n.h3,{id:"validatable-performance-characteristics",children:[(0,t.jsx)(n.code,{children:"Validatable"})," Performance Characteristics"]}),"\n",(0,t.jsx)(n.p,{children:"Baseline (on ~2.5 Ghz core, slower as more complex validations added):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Good data:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Instantiation: ",(0,t.jsx)(n.strong,{children:"100k/s"})," (e.g. ",(0,t.jsx)(n.code,{children:"let a = new MyModel(data);"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Property set: ",(0,t.jsx)(n.strong,{children:"2.5M/s"})," (e.g. ",(0,t.jsx)(n.code,{children:"a.prop = b"}),")"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Bad data:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If using try/catch block (expensive):","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Instantiation: ",(0,t.jsx)(n.strong,{children:"50k/s"}),", Property set: ",(0,t.jsx)(n.strong,{children:"250k/s"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Using ",(0,t.jsx)(n.code,{children:"Validatable.errorsOf"})," to detect fault (See next section)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Instantiation: ",(0,t.jsx)(n.strong,{children:"100k/s"}),", Property set: ",(0,t.jsx)(n.strong,{children:"1.5M/s"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TypeTools.test(obj, MyModel)"})," ",(0,t.jsx)(n.strong,{children:"1 M/s"})," (good data), ",(0,t.jsx)(n.strong,{children:"500k/s"})," (bad data)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If you've called ",(0,t.jsx)(n.code,{children:"TypeTools.config.disableExtensions(Validatable)"})," and are manually validating, instantiation and property set are both within around ",(0,t.jsx)(n.strong,{children:"5M ~ 50M/s"})]}),"\n",(0,t.jsx)(n.h4,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,t.jsxs)(n.p,{children:["The slowest part of validatable class is the ",(0,t.jsx)(n.strong,{children:"instantiation"})," (due to registration overhead of TS Basis extensions) and ",(0,t.jsx)(n.strong,{children:"try/catch block"})," (creating new error and throwing is pretty expensive because of stack tracing overhead.)"]}),"\n",(0,t.jsx)(n.p,{children:"Performance can be greatly helped by:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["If validity checking is all you need, use ",(0,t.jsx)(n.code,{children:"Validatable.test(obj, MyModel)"})]}),"\n",(0,t.jsxs)(n.li,{children:["Running with ",(0,t.jsx)(n.code,{children:"TypeTools.config.disableThrow()"})," and manually checking"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { defineOn, TypeTools, Validatable, ... } from 'ts-basis';\n\nconst obj = { strVal: 'test', numVal: 100 };\n\n// 1) If validity checking is all you need,\nlet valid: boolean;\nvalid = Validatable.test(obj, MyModel); // relatively inexpensive.\nvalid = TypeTools.test(obj, MyModel); // TypeTools.test is an alias of Validatable.test\n\n// 2) Opt in for manually checking errors instead of throwing.\nTypeTools.config.disableThrow();\nconst inst = new MyModel(obj); // would throw normally but doesn't throw.\ninst.strVal = 'invalid'; // would throw normally but doesn't throw.\ninst.numVal = 'not a number'; // cancels assignment.\n\nvalid = Validatable.resultOf(a); // false; inst has 2 errors and 1 cancel.\n\nconst instErrors = Validatable.errorsOf(a);\nif (instErrors.length > 0) { /* some properties called e.throw */\n  for (const tracer of instErrors) {\n    console.log(`${tracer.e.path} has errored with ${tracer.trace.message}, stack: ${tracer.trace.stack}`);\n    // [0] = strVal ERROR at `new MyModel(obj)` where strVal = 'test' is executed.\n    // [1] = strVal ERROR at `inst.strVal = 'invalid';`\n  }\n}\nconst instCancels = Validatable.cancelsOf(a);\nif (aCancels.length > 0) { /* some properties called e.cancel */\n  for (const tracer of instCancels) {\n    console.log(`${tracer.e.path} has errored with ${tracer.trace.message}, stack: ${tracer.trace.stack}`);\n    // [0] = numVal assignment CANCEL on instantiation at `inst.numVal = 'not a number'`\n  }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>o});var t=a(6540);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);