"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6621],{5170:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=n(4848),s=n(8453);const a={title:"Data Importable",sidebar_position:2},r=void 0,l={id:"typetools/extensions/data-importable",title:"Data Importable",description:"The DataImportable module is a TypeScript module that provides functionality for importing and managing data within a system. It utilizes several other modules and extends their capabilities, particularly focusing on handling data transformations, checking types, and managing properties through imports. This module is especially useful in scenarios where dynamic data import and type-checking are required, ensuring the integrity and compatibility of the data being processed.",source:"@site/docs/05_typetools/extensions/data-importable.mdx",sourceDirName:"05_typetools/extensions",slug:"/typetools/extensions/data-importable",permalink:"/docs/typetools/extensions/data-importable",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Data Importable",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Properties Controller",permalink:"/docs/typetools/extensions/properties-controller"},next:{title:"Validatable",permalink:"/docs/typetools/extensions/validatable"}},o={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Classes Overview",id:"classes-overview",level:2},{value:"DataImportableSettings",id:"dataimportablesettings",level:3},{value:"DataImportableExtensionData",id:"dataimportableextensiondata",level:3},{value:"DataImportable",id:"dataimportable",level:3},{value:"Methods and Their Functionality",id:"methods-and-their-functionality",level:2},{value:"Usage Guide",id:"usage-guide",level:2},{value:"Example",id:"example",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"The DataImportable module is a TypeScript module that provides functionality for importing and managing data within a system. It utilizes several other modules and extends their capabilities, particularly focusing on handling data transformations, checking types, and managing properties through imports. This module is especially useful in scenarios where dynamic data import and type-checking are required, ensuring the integrity and compatibility of the data being processed."}),"\n",(0,i.jsx)(t.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#classes-overview",children:"Classes Overview"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#dataimportablesettings",children:"DataImportableSettings"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#dataimportableextensiondata",children:"DataImportableExtensionData"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#dataimportable",children:"DataImportable"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#methods-and-their-functionality",children:"Methods and Their Functionality"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#usage-guide",children:"Usage Guide"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"classes-overview",children:"Classes Overview"}),"\n",(0,i.jsx)(t.h3,{id:"dataimportablesettings",children:"DataImportableSettings"}),"\n",(0,i.jsxs)(t.p,{children:["This class extends ",(0,i.jsx)(t.code,{children:"ClassLineageSettings"})," and is used for managing settings related to ",(0,i.jsx)(t.strong,{children:"Data Importable"})," functionalities."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Properties:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"extensionDataImportable"}),": A static property that defines the extension data identifier."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Constructor"}),": Accepts a partial object of ",(0,i.jsx)(t.code,{children:"DataImportableSettings"})," for initialization."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"dataimportableextensiondata",children:"DataImportableExtensionData"}),"\n",(0,i.jsxs)(t.p,{children:["This class implements the ",(0,i.jsx)(t.code,{children:"TypeToolsExtensionData"})," interface and handles actions that occur ",(0,i.jsx)(t.strong,{children:"before and after data imports"}),"."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Properties:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"beforeimports"}),": An array of functions that execute before data import."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"afterimports"}),": An array of functions that execute after data import."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"import"}),": A method that manages the import process with optional skeleton and assignment parameters."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"dataimportable",children:"DataImportable"}),"\n",(0,i.jsxs)(t.p,{children:["This class implements the ",(0,i.jsx)(t.code,{children:"TypeToolsExtension"})," interface and is the core handler for managing data imports and extensions."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Static Methods:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"getExtensionData"}),": Retrieves extension data from the target using specified settings."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"typeCheck"}),": Checks if the target complies with the ",(0,i.jsx)(t.code,{children:"DataImportable"})," settings."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"implementOn"}),": Implements the data import capabilities on a given target."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Properties:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"settings"}),": Instance of ",(0,i.jsx)(t.code,{children:"DataImportableSettings"})," used for configuration."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Constructor"}),": Accepts optional settings to initialize the ",(0,i.jsx)(t.code,{children:"DataImportable"})," instance."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"methods-and-their-functionality",children:"Methods and Their Functionality"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"getExtensionData(target, settings)"})}),": Retrieves and returns the extension data for a specified target using the provided settings. This method is crucial for accessing the configuration related to data import functionality."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"static getExtensionData(target: any, settings = DataImportableSettings): DataImportableExtensionData {\n  return TypeToolsBase.getExtension(target, settings.extensionDataImportable, settings);\n}\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"typeCheck(target, settings)"})}),": Determines if a target is compatible with the ",(0,i.jsx)(t.code,{children:"DataImportable"})," settings by checking for the presence of extension data."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"static typeCheck(target: any, settings = DataImportableSettings): boolean {\n  return target && !!DataImportable.getExtensionData(target, settings);\n}\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"implementOn(target, settings)"})}),": Integrates data import capabilities onto a specified target. It ensures that the necessary context and properties management are established."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"static implementOn(target: any, settings = DataImportableSettings) {\n  // Implementation logic here\n}\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"import"})}),": This method within ",(0,i.jsx)(t.code,{children:"DataImportableExtensionData"})," manages the actual data import process, applying any necessary transformations and handling errors or cancellations gracefully."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"import(data: any, skel?: any, assignOnly?: boolean) { \n  // Import logic here\n}\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"usage-guide",children:"Usage Guide"}),"\n",(0,i.jsxs)(t.p,{children:["To effectively use the ",(0,i.jsx)(t.code,{children:"DataImportable"})," functionalities in your TypeScript project, follow these steps:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Initialize Settings"}),": Create an instance of ",(0,i.jsx)(t.code,{children:"DataImportableSettings"})," with any required custom settings."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Implement on Target"}),": Use ",(0,i.jsx)(t.code,{children:"DataImportable.implementOn(target)"})," to apply data import capabilities to your target object."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Perform Data Import"}),": Call the ",(0,i.jsx)(t.code,{children:"import"})," method on the target's extension data to manage data import, transformations, and ensure type safety."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Initialize settings\nconst settings = new DataImportableSettings();\n\n// Implement on target\nconst targetObject = {};\nDataImportable.implementOn(targetObject, settings);\n\n// Import data\ntargetObject.import({ key: 'value' });\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(6540);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);